AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Step Function resources

Parameters:
    functionUserListArn:
        Type: String
    functionAdLookupArn:
        Type: String
    functionSummarizerArn:
        Type: String
    functionSlackMessengerArn:
        Type: String
    functionUserDeactivatorArn:
        Type: String

Resources:
    iamRoleStateMachineGrimreaper:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: !Sub states.amazonaws.com
                        Action: "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: StatesExecutionPolicy
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "lambda:InvokeFunction"
                                Resource: "*"

    stateMachineGrimreaper:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "Slack Grim Reaper",
                            "StartAt": "SlackDetermineUserCount",
                            "States": {
                                "SlackDetermineUserCount": {
                                    "Type": "Task",
                                    "Comment": "Query for all Slack members",
                                    "Resource": "${lambdaFunctionUserListArn}",
                                    "TimeoutSeconds": 120,
                                    "ResultPath": "$",
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "TooManyRequestsException"
                                            ],
                                            "Next": "SlackThrottleRetry"
                                        }
                                    ],
                                    "Next": "SlackPaginateDecision"
                                },
                                "SlackPaginateDecision": {
                                    "Type": "Choice",
                                    "Choices": [
                                        {
                                            "Variable": "$.paginate",
                                            "NumericEquals": 1,
                                            "Next": "SlackWait"
                                        },
                                        {
                                            "Variable": "$.paginate",
                                            "NumericEquals": 0,
                                            "Next": "AzureLookup"
                                        }
                                    ]
                                },
                                "SlackWait": {
                                    "Type": "Wait",
                                    "SecondsPath": "$.wait",
                                    "Next": "SlackDetermineUserCount"
                                },
                                "SlackThrottleRetry": {
                                    "Type": "Pass",
                                    "Next": "SlackWait"
                                },
                                "AzureLookup": {
                                    "Type": "Task",
                                    "Comment": "Query Azure AD for all Slack members",
                                    "Resource": "${lambdaFunctionAdLookupArn}",
                                    "TimeoutSeconds": 300,
                                    "ResultPath": "$",
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.Timeout"
                                            ],
                                            "IntervalSeconds": 3,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.5
                                        },
                                        {
                                            "ErrorEquals": [
                                                "ConnectionError"
                                            ],
                                            "IntervalSeconds": 3,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.5
                                        },
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 5,
                                            "MaxAttempts": 3,
                                            "BackoffRate": 1.5
                                        }
                                    ],
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "TooManyRequestsException"
                                            ],
                                            "Next": "AzureThrottleRetry"
                                        }
                                    ],
                                    "Next": "AzureProcessMore"
                                },
                                "AzureProcessMore": {
                                    "Type": "Choice",
                                    "Choices": [
                                        {
                                            "Variable": "$.count",
                                            "NumericGreaterThanEquals": 1,
                                            "Next": "AzureLookup"
                                        },
                                        {
                                            "Variable": "$.count",
                                            "NumericEquals": 0,
                                            "Next": "Summarize"
                                        }
                                    ]
                                },
                                "AzureWait": {
                                    "Type": "Wait",
                                    "SecondsPath": "$.wait",
                                    "Next": "AzureLookup"
                                },
                                "AzureThrottleRetry": {
                                    "Type": "Pass",
                                    "Next": "AzureWait"
                                },
                                "Summarize": {
                                    "Type": "Task",
                                    "Comment": "Summarize active vs inactive users",
                                    "Resource": "${lambdaFunctionSummarizerArn}",
                                    "TimeoutSeconds": 120,
                                    "ResultPath": "$",
                                    "Next": "GetApproval"
                                },
                                "GetApproval": {
                                    "Type": "Task",
                                    "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                                    "HeartbeatSeconds": 172800,
                                    "Parameters": {
                                        "FunctionName": "${lambdaFunctionSlackMessenger}",
                                        "Payload": {
                                            "message_type.$": "$.message_type",
                                            "job_uuid.$": "$.job_uuid",
                                            "active_user_report_link.$": "$.active_user_report_link",
                                            "task_token.$": "$$.Task.Token"
                                        }
                                    },
                                    "Next": "Approved",
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "denied"
                                            ],
                                            "Next": "Denied"
                                        }
                                    ]
                                },
                                "Approved": {
                                    "Type": "Pass",
                                    "ResultPath": "$",
                                    "Next": "DeactivateUsers"
                                },
                                "Denied": {
                                    "Type": "Pass",
                                    "Result": "Approval request to deactivate users denied. Exiting gracefully until tomorrow...",
                                    "End": true
                                },
                                "DeactivateUsers": {
                                    "Type": "Task",
                                    "Comment": "Deactivate Slack users",
                                    "Resource": "${lambdaFunctionDeactivatorArn}",
                                    "TimeoutSeconds": 180,
                                    "ResultPath": "$",
                                    "Next": "Confirm"
                                },
                                "Confirm": {
                                    "Type": "Task",
                                    "Comment": "Confirm deactivation status",
                                    "Resource": "${lambdaFunctionSlackMessengerArn}",
                                    "TimeoutSeconds": 30,
                                    "ResultPath": "$",
                                    "End": true
                                }
                            }
                        }
                    - {lambdaFunctionUserListArn: !Ref functionUserListArn,
                        lambdaFunctionAdLookupArn: !Ref functionAdLookupArn,
                        lambdaFunctionSummarizerArn: !Ref functionSummarizerArn,
                        lambdaFunctionDeactivatorArn: !Ref functionUserDeactivatorArn,
                        lambdaFunctionSlackMessengerArn: !Ref functionSlackMessengerArn,
                        lambdaFunctionSlackMessenger: !Select [6, !Split [ ":", !Ref functionSlackMessengerArn ]]}
            RoleArn: !GetAtt [ iamRoleStateMachineGrimreaper, Arn ]


Outputs:
    stateMachineGrimreaperArn:
        Value: !Ref stateMachineGrimreaper
        Description: State Machine ARN

