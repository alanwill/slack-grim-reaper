AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Slack User Management
Parameters:
    stage:
        Type: String
        AllowedValues:
          - alpha
          - beta
          - prod
        Description: Enter alpha, beta or prod to designate the deployment stage/environment
    notificationsEmail:
        Type: String
        AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
        Description: Enter the email address of a person, group or system to be notified of alarms
    slackToken:
        Type: String
        Description: Slack Token
    azureTenantId:
        Type: String
        Description: Azure Tenant Id
    azureClientId:
        Type: String
        Description: Azure Client Id
    azureClientSecret:
        Type: String
        Description: Azure Client Secret
    layerBucket:
        Type: String
        Description: S3 bucket name containing Lambda layers

Globals:
    Function:
        Runtime: python3.6
        Handler: handler.handler
        MemorySize: 128
        Timeout: 30

Resources:

###
# Nested Stacks
###

    nestedStackLambda:
        Type: AWS::Serverless::Application
        Properties:
            Location: sam/cfn/cfn-lambda-functions.yaml
            Parameters:
                stage: !Ref stage
                slackToken: !Ref slackToken
                azureTenantId: !Ref azureTenantId
                azureClientId: !Ref azureClientId
                azureClientSecret: !Ref azureClientSecret
                layerBucket: !Ref layerBucket
                s3Bucket: !Ref s3Bucket
                dynamodbTableUserProcessing: !GetAtt nestedStackDynamodb.Outputs.dynamodbTableUserProcessing

    nestedStackApigateway:
        Type: AWS::Serverless::Application
        Properties:
            Location: sam/cfn/cfn-api-gateways.yaml
            Parameters:
                stage: !Ref stage

    nestedStackDynamodb:
        Type: AWS::Serverless::Application
        Properties:
            Location: sam/cfn/cfn-dynamodb-tables.yaml

    s3Bucket:
        Type: AWS::S3::Bucket

###
# State Machine
###

    iamRoleStateMachineUserReporter:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: !Sub states.amazonaws.com
                        Action: "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: StatesExecutionPolicy
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "lambda:InvokeFunction"
                                Resource: "*"

    stateMachineUserReporter:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Join [ "-", [ "slack-user-reporter", !Ref stage ] ]
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "Slack User Reporter",
                            "StartAt": "DetermineSlackUserCount",
                            "States": {
                                
                                "DetermineSlackUserCount": {
                                    "Type": "Task",
                                    "Comment": "Looks up Slack users and determines count",
                                    "Resource": "${functionUserListArn}",
                                    "ResultPath": "$",
                                    "Next": "AdLookup"
                                },
                                "AdLookup": {
                                    "Comment": "Query each user against Azure AD",
                                    "Type": "Task",
                                    "Resource": "${functionAdLookupArn}",
                                    "ResultPath": "$",
                                    "Next": "Finisher"
                                },
                                "Finisher": {
                                    "Comment": "Create CSV and send results to S3",
                                    "Type": "Task",
                                    "Resource": "${functionFinisherArn}",
                                    "End": true
                                
                                }
                            }
                        }
                    - {functionUserListArn: !GetAtt nestedStackLambda.Outputs.functionUserListArn,
                        functionAdLookupArn: !GetAtt nestedStackLambda.Outputs.functionAdLookupArn,
                        functionFinisherArn: !GetAtt nestedStackLambda.Outputs.functionFinisherArn}
            RoleArn: !GetAtt [ iamRoleStateMachineUserReporter, Arn ]


