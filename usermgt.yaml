AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Slack User Management
Parameters:
    stage:
        Type: String
        AllowedValues:
          - alpha
          - beta
          - prod
        Description: Enter alpha, beta or prod to designate the deployment stage/environment
    notificationsEmail:
        Type: String
        AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
        Description: Enter the email address of a person, group or system to be notified of alarms
    slackToken:
        Type: String
        Description: Slack Token
    azureTenantId:
        Type: String
        Description: Azure Tenant Id
    azureClientId:
        Type: String
        Description: Azure Client Id
    azureClientSecret:
        Type: String
        Description: Azure Client Secret

Globals:
    Function:
        Runtime: python3.6
        Handler: handler.handler
        MemorySize: 128
        Timeout: 30

Resources:
###
# Lambda functions
###
    functionUserList:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Join [ "-", [ "slack-user-reporter-userlist", !Ref stage ] ]
            Description: Generates a list of all slack users with non-disabled accounts
            CodeUri: ./sam/functions/slack-user-reporter-userlist
            Timeout: 900
            MemorySize: 1024
            Tracing: Active
            Policies:
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
                - DynamoDBCrudPolicy:
                    TableName: !Ref dynamodbTableUserProcessing
            Environment:
                Variables:
                    SLACK_TOKEN: !Ref slackToken
                    USER_PROCESSING_TABLE: !Ref dynamodbTableUserProcessing

    functionAdLookup:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Join [ "-", [ "slack-user-reporter-adlookup", !Ref stage ] ]
            Description: Looks up each Slack user against Azure AD
            CodeUri: ./sam/functions/slack-user-reporter-adlookup
            Timeout: 900
            MemorySize: 1024
            Tracing: Active
            Policies:
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
                - DynamoDBCrudPolicy:
                    TableName: !Ref dynamodbTableUserProcessing
            Environment:
                Variables:
                    AZURE_TENANT_ID: !Ref azureTenantId
                    AZURE_CLIENT_ID: !Ref azureClientId
                    AZURE_CLIENT_SECRET: !Ref azureClientSecret
                    USER_PROCESSING_TABLE: !Ref dynamodbTableUserProcessing

    functionFinisher:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Join [ "-", [ "slack-user-reporter-finisher", !Ref stage ] ]
            Description: Creates CSV and uploads to S3
            CodeUri: ./sam/functions/slack-user-reporter-finisher
            Timeout: 120
            MemorySize: 128
            Tracing: Active
            Policies:
                - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
                - DynamoDBCrudPolicy:
                    TableName: !Ref dynamodbTableUserProcessing
            Environment:
                Variables:
                    USER_PROCESSING_TABLE: !Ref dynamodbTableUserProcessing

    functionIterator:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Join [ "-", [ "slack-user-reporter-iterator", !Ref stage ] ]
            Description: Generates iterator to loop through Slack user list
            CodeUri: ./sam/functions/slack-user-reporter-iterator

    s3Bucket:
        Type: AWS::S3::Bucket


###
# DynamoDB Tables
###

    dynamodbTableUserProcessing:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                -
                    AttributeName: uuid
                    AttributeType: "S"
                -
                    AttributeName: index
                    AttributeType: "N"
            KeySchema:
                -
                    AttributeName: uuid
                    KeyType: HASH
                -
                    AttributeName: index
                    KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: '1'
                WriteCapacityUnits: '10'
            TableName: !Join [ "-", [ "slack-user-reporter-userprocessing", !Ref stage ] ]

###
# State Machine
###

    iamRoleStateMachineUserReporter:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: !Sub states.amazonaws.com
                        Action: "sts:AssumeRole"
            Path: "/"
            Policies:
                -
                    PolicyName: StatesExecutionPolicy
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "lambda:InvokeFunction"
                                Resource: "*"

    stateMachineUserReporter:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Join [ "-", [ "slack-user-reporter", !Ref stage ] ]
            DefinitionString:
                !Sub
                    - |-
                        {
                            "Comment": "Slack User Reporter",
                            "StartAt": "DetermineSlackUserCount",
                            "States": {
                                
                                "DetermineSlackUserCount": {
                                    "Type": "Task",
                                    "Comment": "Looks up Slack users and determines count",
                                    "Resource": "${functionUserListArn}",
                                    "ResultPath": "$",
                                    "Next": "Iterator"
                                },
                                "Iterator": {
                                    "Type": "Task",
                                    "Comment": "Takes count of Slack users and sets up loop iterator",
                                    "Resource": "${functionIteratorArn}",
                                    "ResultPath": "$.iterator",
                                    "Next": "IsCountReached"
                                },
                                "IsCountReached": {
                                    "Type": "Choice",
                                    "Choices": [
                                        {
                                            "Variable": "$.iterator.continue",
                                            "BooleanEquals": true,
                                            "Next": "AdLookup"
                                        }
                                    ],
                                    "Default": "Finisher"
                                },
                                "AdLookup": {
                                    "Comment": "Your application logic, to run a specific number of times",
                                    "Type": "Task",
                                    "Resource": "${functionAdLookupArn}",
                                    "ResultPath": "$.result",
                                    "Next": "Iterator"
                                },
                                "Finisher": {
                                    "Type": "Task",
                                    "Resource": "${functionFinisherArn}",
                                    "End": true
                                
                                }
                            }
                        }
                    - {functionUserListArn: !GetAtt [ functionUserList, Arn ],
                        functionAdLookupArn: !GetAtt [ functionAdLookup, Arn ],
                        functionFinisherArn: !GetAtt [ functionFinisher, Arn ],
                        functionIteratorArn: !GetAtt [ functionIterator, Arn ]}
            RoleArn: !GetAtt [ iamRoleStateMachineUserReporter, Arn ]


